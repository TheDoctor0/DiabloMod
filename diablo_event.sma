/* Script generated by Pawn Studio */

#include <amxmodx>
#include <amxmisc>
#include <colorchat>
#include <fun>
#include <fakemeta>
#include <engine>
#include <cstrike>
#include <diablo_nowe.inc>

#define PLUGIN	"Diablo Event"
#define AUTHOR	"DarkGL"
#define VERSION	"1.0"

#define MAX 					32
#define ADMIN_FLAG_GIVE 		ADMIN_ADMIN

new const DIABLO_EVENT_SOUND[] 	=	"sound/diablo_taunt.mp3";

new pCvarDiabloEvent,
pCvarHpDiablo,
pCvarEvenExp,
pCvarDiabloCamera ,
pCvarDropNeed;

new eventState	=	0,
idDiablo	=	0,
iActualDrops	=	0,
iOldTeams[ MAX + 1 ],
iDmg[ MAX + 1] ,
spriteBeam;

new const maxAmmo[31]={0,52,0,90,1,32,1,100,90,1,120,100,100,90,90,90,100,120,30,120,200,32,90,120,90,2,35,90,90,0,100};


public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	pCvarDiabloEvent	=	register_cvar( "diablo_event" , "1" );
	pCvarDropNeed		=	register_cvar( "diablo_drop_need", "100" );
	pCvarHpDiablo		=	register_cvar( "diablo_diablo_hp", "2500" );
	pCvarEvenExp		=	register_cvar( "diablo_event_exp" , "125" );
	pCvarDiabloCamera	=	register_cvar( "diablo_camera", "1");
	
	register_clcmd("say /event", "checkEvent");
	register_clcmd("say_team /event", "checkEvent");
	
	register_clcmd("amx_eventdiablo", "eventDiablo", ADMIN_FLAG_GIVE );
	
	register_logevent("KoniecRundy", 2, "1=Round_End")
	register_logevent("PoczatekRundy", 2, "1=Round_Start")
	register_event("HLTV", "NowaRunda", "a", "1=0", "2=0")
	register_event("CurWeapon","CurWeapon","be", "1=1")
}

public plugin_precache(){
	precache_generic(DIABLO_EVENT_SOUND);
	spriteBeam = precache_model("sprites/zbeam4.spr");
	precache_model( "models/player/event/event.mdl" );
}

public plugin_cfg(){
	
	new szPathConfigFolder[ 256 ],
		szPathDropFile[ 256 ];
	
	get_configsdir( szPathConfigFolder , charsmax( szPathConfigFolder ) );
	
	formatex( szPathDropFile , charsmax( szPathDropFile ) , "%s/eventDrop.ini" , szPathConfigFolder );
	
	if( file_exists( szPathDropFile ) ){
		new szText[ 64 ], iTextLen	=	0;
		
		read_file( szPathDropFile , 0 , szText , charsmax( szText ) , iTextLen );
		
		iActualDrops	=	str_to_num( szText );
	}
}

public checkEvent( id){
	ColorChat( id , GREEN , "^x04[DiabloMod]^x01 Do startu Eventu Diablo potrzeba^x04 %d^x01dropnietych itemow. Aktualny stan:^x04 %d/%d^x01." , get_pcvar_num( pCvarDropNeed ) , iActualDrops , get_pcvar_num( pCvarDropNeed ) );
	
	return PLUGIN_HANDLED; 
}

public eventDiablo( id , level , cid ){
	if(!cmd_access(id,level, cid, 1) || eventState != 0) 
	return PLUGIN_HANDLED; 
	
	eventState	=	1;
	
	set_hudmessage(255, 0, 0, -1.0, 0.18, 0, 6.0, 12.0)
	show_hudmessage(0, "W nastepnej rundzie rozpocznie sie Event Diablo powodzenia !")		
	
	return PLUGIN_HANDLED; 
}

public NowaRunda(){
	static bChange =	false;
	static iCvars[ 5 ];
	if( eventState	==	2 ){
		set_task( 4.0 , "taskPlaySound" , 666 );
		
		bChange	=	true;
		
		iCvars[0] = get_cvar_num("mp_buytime");
		iCvars[1] = get_cvar_num("mp_freezetime");
		iCvars[2] = get_cvar_num("mp_roundtime");
		iCvars[3] = get_cvar_num("mp_autoteambalance");
		iCvars[4] = get_cvar_num("mp_startmoney");
		
		server_cmd("mp_buytime 999999");
		server_cmd("mp_freezetime 0");
		server_cmd("mp_roundtime 9");
		server_cmd("mp_autoteambalance 0");
		server_cmd("mp_startmoney 2000");
		server_exec();
	}
	else if( bChange ){
		bChange	=	false;
		
		server_cmd("mp_buytime %d", iCvars[0] );
		server_cmd("mp_freezetime %d", iCvars[1]);
		server_cmd("mp_roundtime %d", iCvars[2]);
		server_cmd("mp_autoteambalance %d", iCvars[3]);
		server_cmd("mp_startmoney %d" , iCvars[4] );
		server_exec();
	}
}

public taskPlaySound(){
	client_cmd( 0 , "mp3 play ^"%s^"",DIABLO_EVENT_SOUND);
}

public PoczatekRundy(){
	if( eventState != 2 ){
		return PLUGIN_CONTINUE;
	}
	
	set_hudmessage(255, 0, 0, -1.0, 0.18, 0, 6.0, 12.0)
	show_hudmessage(0, "Nie czekaj tylko ruszaj! Zabij wraz z druzyna potwora i ciesz sie dodatkowym expem.");
	
	return PLUGIN_CONTINUE;
}

public KoniecRundy(){
	if( get_pcvar_num( pCvarDiabloEvent ) ){
		if( eventState == 1){
			new iPlayers[ MAX + 1 ] , iNum = 0;
			for( new i = 1 ; i < MAX + 1 ; i++ ){
				if( !is_user_connected( i ) || ( cs_get_user_team( i ) != CS_TEAM_CT && cs_get_user_team( i ) != CS_TEAM_T ) || is_user_bot( i ) || is_user_hltv( i ) || !diablo_get_user_class( i ) )
				continue;
				
				iPlayers[ iNum++ ]	=	i;
			}
			
			if( iNum > 0 ){
				idDiablo	=	iPlayers[ random_num( 0 , iNum - 1 ) ];
			}
			else{
				eventState	=	0;
				
				return PLUGIN_CONTINUE;
			}
			
			for( new i = 1 ; i < MAX + 1 ; i++ ){
				iDmg[ i ] = 0;
				if( !is_user_connected( i ) || ( cs_get_user_team( i ) != CS_TEAM_CT && cs_get_user_team( i ) != CS_TEAM_T ) || i == idDiablo )
				continue;
				
				
				iOldTeams[ i ]	=	_:cs_get_user_team( i );
				
				cs_set_user_team( i , CS_TEAM_CT , CS_CT_GIGN );
			}
			
			iOldTeams[ idDiablo ]	=	_:cs_get_user_team( idDiablo );
			
			cs_set_user_team( idDiablo , CS_TEAM_T , CS_T_LEET );
			
			eventState	=	2;
		}
		else if ( eventState == 2 ){
			eventState	=	0;
			
			if( is_user_connected( idDiablo ) ){
				
				cs_reset_user_model( idDiablo );
				
				set_view( idDiablo ,CAMERA_NONE);
			}
			
			idDiablo	=	0;
			
			for( new i = 1 ; i < MAX + 1 ; i++ ){
				if( !is_user_connected( i ) || ( cs_get_user_team( i ) != CS_TEAM_CT && cs_get_user_team( i ) != CS_TEAM_T )){
					iOldTeams[ i ]	= 0;
					continue;
				}
				
				cs_set_user_team( i , CsTeams:iOldTeams[ i ] , CsTeams:iOldTeams[ i ] == CS_TEAM_CT ? CS_CT_GIGN : CS_T_LEET);
				
				iOldTeams[ i ]	= 0;
			}
		}
	}
	
	return PLUGIN_CONTINUE;
}

public diablo_damage_taken_pre(iKiller , iVictim , &Float:fDamage ){
	if( eventState	== 2 && iVictim == idDiablo && diablo_get_user_class( iKiller ) ){
		iDmg[ iKiller ] += floatround( fDamage );
	}
}

public diablo_is_additional_damage(){
	if( eventState == 0 ){
		return PLUGIN_HANDLED;
	}
	return PLUGIN_CONTINUE;
}

public pfn_touch ( ptr, ptd )
{	
	if (ptd == 0)	return PLUGIN_CONTINUE
	
	new szClassName[64]
	
	if(pev_valid(ptd))	entity_get_string(ptd, EV_SZ_classname, szClassName, charsmax( szClassName) )
	else return PLUGIN_HANDLED;
	
	if(equal(szClassName, "fireball"))
	{
		new owner = pev(ptd,pev_owner)
		
		entity_get_string(ptr, EV_SZ_classname, szClassName, charsmax( szClassName) )
		
		if(equal(szClassName,"worldspawn") || is_user_alive(ptr) || (pev_valid(ptr) && pev(ptr,pev_solid) != SOLID_NOT && pev(ptr,pev_solid) != SOLID_TRIGGER) && owner == idDiablo){
			new Float:fOrigin[3]
			
			pev( ptd , pev_origin , fOrigin );
			
			diablo_create_explode(0,fOrigin,0.0, 0.0);
			
			new Players[32], playerCount, iEnemy;
			get_players(Players, playerCount, "ah") 
			
			new id = owner,Float:fDist = 100.0 + diablo_get_user_int( owner ),Float:fDamage = 150.0;
			
			for (new i=0; i<playerCount; i++) 
			{
				iEnemy = Players[i] 
				
				new Float:aOrigin[3]
				pev(iEnemy,pev_origin,aOrigin)
				
				if (get_user_team(id) != get_user_team(iEnemy) && get_distance_f(aOrigin,fOrigin) < fDist && is_user_alive( iEnemy ))
				{
					
					if (is_user_alive( iEnemy) ){
						diablo_damage(iEnemy,id,fDamage,diabloDamageGrenade);
					}
					
					diablo_create_explode(owner,fOrigin,0.0,150.0);
				}
				
			}
			remove_entity(ptd)
		}
	}
	
	return PLUGIN_CONTINUE
}

public diablo_preThink( id ){
	if( eventState == 2 && is_user_alive( id ) && id == idDiablo && get_user_weapon( id ) == CSW_KNIFE){
		const Float:fMust	=	3.0;
		static Float:fTime;
		
		if( get_gametime() > fTime ){
			set_hudmessage(60, 200, 25, -1.0, 0.25, 0, 1.0, 2.0, 0.1, 0.2, 2)
			show_hudmessage(id, "Wyczarowales fireballa") 
			
			fTime =	get_gametime() + fMust;
			
			createBarTime(id, floatround(fMust,floatround_ceil));
			
			new Float:vOrigin[3]
			new fEntity
			entity_get_vector(id,EV_VEC_origin, vOrigin)
			fEntity = create_entity("info_target")
			entity_set_model(fEntity, "models/rpgrocket.mdl")
			entity_set_origin(fEntity, vOrigin)
			entity_set_int(fEntity,EV_INT_effects,64)
			entity_set_string(fEntity,EV_SZ_classname,"fireball")
			entity_set_int(fEntity, EV_INT_solid, SOLID_BBOX)
			entity_set_int(fEntity,EV_INT_movetype,5)
			entity_set_edict(fEntity,EV_ENT_owner,id)
			
			
			
			//Send forward
			new Float:fl_iNewVelocity[3]
			VelocityByAim(id, 500, fl_iNewVelocity)
			entity_set_vector(fEntity, EV_VEC_velocity, fl_iNewVelocity)
			
			
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY) 
			write_byte(22) 
			write_short(fEntity) 
			write_short(spriteBeam) 
			write_byte(45) 
			write_byte(4) 
			write_byte(255) 
			write_byte(0) 
			write_byte(0) 
			write_byte(25)
			message_end() 
		}
	}
}

public diablo_weapon_deploy(id,wpnID,weaponEnt){
	if( eventState == 2 && idDiablo == id ){
		engclient_cmd( id , "weapon_knife" );
		client_cmd( id , "weapon_knife" );
	}
}

public CurWeapon( id ){
	if( eventState == 2 && is_user_alive( id ) ){
		if(maxAmmo[get_user_weapon( id )] > 0){
			cs_set_user_bpammo(id, get_user_weapon( id ), maxAmmo[get_user_weapon( id )]);
		}
	}
}

public diablo_player_spawned(id){
	if( eventState	==	2 ){
		diablo_screen_shake( id , (1<<12) * 3 , (1<<12) * 3 , (1<<12) * 3);
		
		if( id == idDiablo ){
			diablo_set_max_hp( id , get_pcvar_num ( pCvarHpDiablo ) * get_playersnum() );
			
			set_user_health( id , get_pcvar_num ( pCvarHpDiablo ) * get_playersnum() );
			
			cs_set_user_model( id , "event" );
			
			switch( get_pcvar_num( pCvarDiabloCamera ) ){
			case 0: set_view(id, CAMERA_UPLEFT);		
			case 1: set_view(id, CAMERA_3RDPERSON);
			case 2: set_view(id, CAMERA_NONE);				
			}
		}
	}
}

public diablo_death(iKiller , killerClass , iVictim , victimClass ){
	if( iVictim == idDiablo && eventState	==	2 ){
		new iAlive	=	0 , iBest = 0 , iBestId = 0;
		
		for( new i = 1 ; i < MAX + 1 ; i++ ){
			if( !is_user_alive( i ) || i == idDiablo ){
				continue;
			}
			
			if( iBest < iDmg[ i ] ){
				iBest = iDmg[ i ];
				iBestId	=	i;
			}
			
			iAlive++;
		}
		
		if( iAlive > 0 ){
			
			new iExp	=	get_pcvar_num( pCvarEvenExp ) / iAlive;
			
			for( new i = 1 ; i < MAX + 1 ; i++ ){
				if( !is_user_alive( i ) || i == idDiablo ){
					continue;
				}
				
				diablo_add_xp( i , iExp );
				
				if( i == iBestId ){
					diablo_add_xp( i , iExp );
				}
				
				ColorChat( i , GREEN , "^x04[DiabloMod]^x01 Brawo! Za zabicie Diablo dostajesz^x04 %i^x01 expa!" , i == iBestId ? iExp * 2 : iExp )
			}
			
			set_hudmessage(255, 0, 0, -1.0, 0.18, 0, 6.0, 12.0)
			show_hudmessage(0, "Dobro wygralo");
			
		}
	}
	else if ( eventState == 2 ){
		new iIle = 0;
		for( new i = 1 ; i < MAX + 1 ; i++ ){
			if( !is_user_alive( i ) || cs_get_user_team( i ) != CS_TEAM_T ){
				continue;
			}
			
			iIle++;
		}
		
		if( iIle == 0 && is_user_alive( idDiablo )){
			set_hudmessage(255, 0, 0, -1.0, 0.18, 0, 6.0, 12.0)
			show_hudmessage(0, "Zlo zapanowalo nad swiatem");
		}
	}
}

public diablo_give_item(){
	if( get_pcvar_num( pCvarDiabloEvent ) ){
		iActualDrops++;
		
		if( get_pcvar_num( pCvarDropNeed ) == iActualDrops && eventState == 0){
			eventState	=	1;
			
			set_hudmessage(255, 0, 0, -1.0, 0.18, 0, 6.0, 12.0)
			show_hudmessage(0, "W nastepnej rundzie rozpocznie sie Event Diablo powodzenia!")		
			
			iActualDrops	=	0;
		}
	}
}

public diablo_can_use_skill( id ){
	if( eventState	!=	0 ){
		return 0;
	}
	return 1;
}

public plugin_end(){
	new szPath[ 256 ], szTmp[ 64 ];
	
	formatex( szPath[ get_configsdir( szPath , charsmax( szPath ) ) ] , charsmax( szPath ) , "/eventDrop.ini" );
	num_to_str( iActualDrops , szTmp , charsmax( szTmp ) );
	
	delete_file( szPath );
	write_file( szPath , szTmp , -1 );
}

stock createBarTime(id, iTime, startprogress = 0){
	static barTime2;
	
	if(!barTime2)	barTime2	=	get_user_msgid("BarTime2");
	
	message_begin( id ? MSG_ONE : MSG_ALL, barTime2, _, id)
	write_short( iTime );
	write_short( startprogress );
	message_end(); 
	
}