/* Plugin generated by AMXX-Studio */
#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <nvault>
#include <ColorChat>
#include <diablo_nowe.inc>

#define PLUGIN		"Diablo Quests"
#define VERSION		"1.0"
#define AUTHOR		"O'Zone"

#define MAX_PLAYER 32

forward diablo_item_get(id, item);
native diablo_get_items_num();
native diablo_get_classes_num();

enum {
	NONE = 0,
	KILL = 1,
	HEADSHOT = 2,
	SUBSTRATES = 3,
	DISARM = 4,
	RESUCE_HOSTAGES = 5,
	DMG = 6, 
	CLASS = 7,
	ITEM = 8
}

new QuestInfoMessage[][] = 
{
	"Brak Questa %i",
	"Musisz zabic jeszcze %i osob",
	"Musisz zabic jeszcze %i osob headshotem",
	"Musisz podlozyc bombe jeszcze %i razy",
	"Musisz rozbroic bombe jeszcze %i razy",
	"Musisz uratowac jeszcze %i razy hosty",
	"Musisz zadac jeszcze %i obrazen",
	"Musisz zabic klase %s jeszcze %i razy",
	"Musisz znalezc item %s jeszcze %i razy"
}

new QuestyPrzedzial[][] = 
{
	{1, 20},
	{21, 40},
	{41, 60},
	{61, 80},
	{81, 100}
}

new QuestRozdzial[][] = 
{
	"Pierwszy",
	"Drugi",
	"Trzeci",
	"Czwarty",
	"Piaty"
}

new szPlayerName[MAX_PLAYER+1][64];
new szClassName[MAX_PLAYER+1][64];
new iPlayerQuestID[MAX_PLAYER+1];
new iPlayerQuestType[MAX_PLAYER+1];
new iPlayerQuestAdditional[MAX_PLAYER+1];
new iPlayerQuestProgress[MAX_PLAYER+1];
new iPlayerPrzedzial[MAX_PLAYER+1];

new vault;
new MenuCallback;
new MaxQuest;

new Array:gPrzedzial;
new Array:gIleRazy;
new Array:gTyp;
new Array:gNagroda;

native diablo_force_password(id);
native diablo_check_password(id);

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	vault = nvault_open("Quests");
	
	register_clcmd("say /quests", "MenuQuestow");
	register_clcmd("say /questy", "MenuQuestow");
	register_clcmd("say /misje", "MenuQuestow");
	register_clcmd("say /q", "MenuQuestow");
	register_clcmd("say /m", "MenuQuestow");
	register_clcmd("sayteam /quests", "MenuQuestow");
	register_clcmd("sayteam /questy", "MenuQuestow");
	register_clcmd("sayteam /misje", "MenuQuestow");
	register_clcmd("sayteam /q", "MenuQuestow");
	register_clcmd("sayteam /m", "MenuQuestow");
	
	register_event("DeathMsg", "DeathMsg", "a");
	register_event("Damage", "Damage", "b", "2!=0");
	register_logevent("LogEvent_Quest", 3, "1=triggered");
	register_event("TextMsg","LogEvent_Quest2","a","2&#All_Hostages_R");
}

public plugin_cfg() 
{
	gPrzedzial 	= ArrayCreate();
	gIleRazy	= ArrayCreate();
	gTyp		= ArrayCreate();
	gNagroda	= ArrayCreate();
	
	MenuCallback = menu_makecallback("menu_callback");
	
	new plik[128]; get_localinfo("amxx_configsdir", plik, charsmax(plik));
	format(plik, charsmax(plik), "%s/misje.ini", plik);
	
	if(!file_exists(plik))
	{
		new szError[512];
		formatex(szError, charsmax(szError), "[Questy] Nie mozna znalesc pliku misje.ini w lokalizacji %s", plik);
		set_fail_state(szError);
	}
	
	new fp = fopen(plik, "r");
	
	new tresc[128], dane[4][32];
	while(!feof(fp)) 
	{
		fgets(fp, tresc, charsmax(tresc));
		
		if(tresc[0] == ';' || tresc[0] == '^0' || !tresc[0]) 
			continue;
				
		parse(tresc, dane[0], 31, dane[1], 31, dane[2], 31, dane[3], 31);
		
		replace_all(tresc, 127, "^"", "");
		//replace_all(tresc, 127, "^"", "");
		
		ArrayPushCell(gPrzedzial, str_to_num(dane[0]));
		ArrayPushCell(gIleRazy, str_to_num(dane[1]));
		ArrayPushCell(gTyp, str_to_num(dane[2]));
		ArrayPushCell(gNagroda, str_to_num(dane[3]));	
	}
	fclose(fp);
	
	MaxQuest = ArraySize(gPrzedzial);
}

public plugin_end()
{
	ArrayDestroy(gPrzedzial);
	ArrayDestroy(gIleRazy);
	ArrayDestroy(gTyp);
	ArrayDestroy(gNagroda);
	
	nvault_close(vault);
}

public plugin_precache()
{
	precache_sound("DiabloMod/select.wav");
	precache_sound("DiabloMod/award.wav");
}

public client_connect(id)
{
	if(is_user_bot(id) || is_user_hltv(id))
		return;
		
	ResetQuest(id);
	get_user_name(id, szPlayerName[id], 63);
}

public MenuQuestow(id)
{
	if(!diablo_check_password(id))
	{
		diablo_force_password(id);
		return PLUGIN_HANDLED;
	}
	
	client_cmd(id, "spk DiabloMod/select");
	new menu = menu_create("\rQuesty \w- \yWybierz Akcje:", "MenuQuestow_Handler");
	(iPlayerQuestType[id]) ? menu_additem(menu, "\wWybierz \rQuest", _, _, MenuCallback) : menu_additem(menu, "\wWybierz \rQuest");
	(iPlayerQuestType[id]) ? menu_additem(menu, "\wZakoncz \rQuest") : menu_additem(menu, "\wZakoncz \rQuest", _, _, MenuCallback);
	(iPlayerQuestType[id]) ? menu_additem(menu, "\wSprawdz \rPostep") : menu_additem(menu, "\wSprawdz \rPostep", _, _, MenuCallback);

	menu_display(id, menu, 0);
	
	return PLUGIN_HANDLED;
}

public MenuQuestow_Handler(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	
	switch(item)
	{
		case 0: MenuQuestow2(id);
		case 1: 
		{
			ResetQuest(id);
			ColorChat(id, GREEN, "[DiabloMod]^x01 Porzuciles wykonywanie Questa.");
		}
		case 2: CheckQuest(id);
	}
	
	client_cmd(id, "spk DiabloMod/select");
	return PLUGIN_HANDLED;
}

public MenuQuestow2(id)
{
	client_cmd(id, "spk DiabloMod/select");
	if(!iPlayerQuestType[id])
	{
		new menu = menu_create("\yWybierz Rozdzial:", "MenuQuestow2_Handler");
		new formats[128];
		
		for(new i = 0; i < sizeof(QuestyPrzedzial); i++)
		{
			if(diablo_get_user_level(id) >= QuestyPrzedzial[i][0])
			{
				formatex(formats, 127, "Rozdzial \r%s \y(%i Poziom - %i Poziom)", QuestRozdzial[i], QuestyPrzedzial[i][0], QuestyPrzedzial[i][1]);
				menu_additem(menu, formats);	
			}
			else
			{
				formatex(formats, 127, "\dRozdzial %s (%i Poziom - %i Poziom)", QuestRozdzial[i], QuestyPrzedzial[i][0], QuestyPrzedzial[i][1]);
				menu_additem(menu, formats, _, _, MenuCallback);
			}
		}
		menu_setprop(menu, MPROP_EXITNAME, "Wyjscie");
		menu_display(id, menu, 0);
	}
	else
		ColorChat(id, GREEN, "[DiabloMod]^x01 Wykonaj najpierw poprzedni Quest.");
}

public MenuQuestow2_Handler(id, menu, item)
{
	client_cmd(id, "spk DiabloMod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	iPlayerPrzedzial[id] = item;
	menu_destroy(menu);
	
	new menu = menu_create("\wWybierz \rQuest:","MenuQuestow2_Handler2");
	new formats[128];
	for(new i = 0; i < MaxQuest; i++)
	{	
		if(ArrayGetCell(gPrzedzial, i) == item)
		{		
			switch(ArrayGetCell(gTyp, i))
			{
				case KILL: formatex(formats, 127, "Zabij %i osob \y(Nagroda: %i expa)", ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case HEADSHOT: formatex(formats, 127, "Zabij %i osob z HS \y(Nagroda: %i expa)",  ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case SUBSTRATES: formatex(formats, 127, "Podloz %i bomb \y(Nagroda: %i expa)",  ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case RESUCE_HOSTAGES: formatex(formats, 127, "Uratuj %i razy hosty \y(Nagroda: %i expa)",  ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case DISARM: formatex(formats, 127, "Rozbroj %i bomb \y(Nagroda: %i expa)",  ArrayGetCell(gIleRazy, i),  ArrayGetCell(gNagroda, i));
				case DMG: formatex(formats, 127, "Zadaj %i obrazen \y(Nagroda: %i expa)",  ArrayGetCell(gIleRazy, i),  ArrayGetCell(gNagroda, i));
				case CLASS: formatex(formats, 127, "Zabij %i razy wybrana klase \y(Nagroda: %i expa)", ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case ITEM: formatex(formats, 127, "Znajdz %i razy wybrany item \y(Nagroda: %i expa)", ArrayGetCell(gIleRazy, i), ArrayGetCell(gNagroda, i));
				case NONE: continue;
			}
			menu_additem(menu, formats);
		}
	}
	menu_setprop(menu, MPROP_BACKNAME, "Wroc");
	menu_setprop(menu, MPROP_NEXTNAME, "Dalej");
	menu_setprop(menu, MPROP_EXITNAME, "Wyjscie");
	menu_display(id, menu, 0);
	
	return PLUGIN_HANDLED;
}

public MenuQuestow2_Handler2(id, menu, item)
{
	client_cmd(id, "spk DiabloMod/select");
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}

	new ile = 0;
	for(new i = 0; i < MaxQuest; i++)
	{
		if(ArrayGetCell(gPrzedzial, i) != iPlayerPrzedzial[id])
			continue;
		
		if(ile == item)
		{
			item = i+1;
			break;
		}
		ile++;
	}

	ResetQuest(id);
	iPlayerQuestID[id] = item;
	iPlayerQuestType[id] = ArrayGetCell(gTyp, item);
	switch(iPlayerQuestType[id])
	{
		case ITEM: ChooseItem(id);
		case CLASS: ChooseClass(id);
		default: ColorChat(id, GREEN, "[DiabloMod]^x01 Rozpoczales wykonywac Quest. Powodzenia!");
	}
	
	menu_destroy(menu);
	return PLUGIN_HANDLED;
}

public ChooseClass(id)
{
	client_cmd(id, "spk DiabloMod/select");
	new menu = menu_create("\wWybierz \rKlase \wdo \yQuesta:", "Choose_Handler");
	new szTmp[128], szNum[64], szClass[64];
	for(new i = 1; i <= diablo_get_classes_num(); i++)
	{
		diablo_get_class_name(i, szClass, charsmax(szClass));
		formatex(szTmp,charsmax(szTmp), "%s", szClass);
		num_to_str(i, szNum, charsmax(szNum));
		menu_additem(menu, szTmp, szNum);
	}
	menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	menu_setprop(menu, MPROP_BACKNAME, "Wroc");
	menu_setprop(menu, MPROP_NEXTNAME, "Dalej");
	menu_setprop(menu, MPROP_PERPAGE, 0);
	menu_display(id, menu, 0);
}

public ChooseItem(id)
{
	client_cmd(id, "spk DiabloMod/select");
	new menu = menu_create("\wWybierz \rItem \wdo \yQuesta:", "Choose_Handler");
	new szTmp[128], szNum[64], szItem[64];
	for(new i = 1; i <= diablo_get_items_num(); i++)
	{
		diablo_get_item_name(i, szItem, charsmax(szItem));
		formatex(szTmp,charsmax(szTmp), "%s", szItem);
		num_to_str(i, szNum, charsmax(szNum));
		menu_additem(menu, szTmp, szNum);
	}
	menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	menu_setprop(menu, MPROP_BACKNAME, "Wroc");
	menu_setprop(menu, MPROP_NEXTNAME, "Dalej");
	menu_display(id, menu, 0);
}

public Choose_Handler(id, menu, item)
{
	client_cmd(id, "spk DiabloMod/select");
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new data[64], iName[64], acces, callback;
	menu_item_getinfo(menu, item, acces, data, 63, iName, 63, callback);
	
	iPlayerQuestAdditional[id] = str_to_num(data);
	ColorChat(id, GREEN, "[DiabloMod]^x01 Rozpoczales wykonywac Quest. Powodzenia!");
	
	menu_destroy(menu);
	return PLUGIN_HANDLED;
}

public menu_callback(id, menu, item)
	return ITEM_DISABLED;
	
public AddProgress(id, amount)
{
	if(!is_user_connected(id))
		return PLUGIN_HANDLED;
		
	SaveQuest(id, iPlayerQuestType[id]);
	
	if(CheckProgress(id))
		GiveAward(id);
	else
		iPlayerQuestProgress[id] += amount;

	return PLUGIN_HANDLED;
}

public CheckProgress(id)
{
	if(!is_user_connected(id))
		return PLUGIN_HANDLED;

	new need = get_user_progress_need(id) - 1;
	new progress = get_user_progress(id)
	
	if(progress >= need)
		return 1;
	else 
		return 0;	
	
	return PLUGIN_HANDLED;
}

public GiveAward(id)
{
	if(!is_user_connected(id))
		return PLUGIN_HANDLED;
	
	client_cmd(id, "spk DiabloMod/award");
	new award = ArrayGetCell(gNagroda, iPlayerQuestID[id]);
	diablo_add_xp(id, award);
	ColorChat(id, GREEN, "[DiabloMod]^x01 Gratulacje! Ukonczyles Quest, otrzymujesz^x03 %i^x01 expa.", award);
	ResetQuest(id);
	
	return PLUGIN_HANDLED;
}

public ResetQuest(id)
{
	iPlayerQuestType[id] = NONE;
	iPlayerQuestID[id]   = 0;
	iPlayerQuestProgress[id]  = 0;
	iPlayerQuestAdditional[id]  = 0;
}

public CheckQuest(id)
{
	if(!iPlayerQuestType[id])
		ColorChat(id, GREEN, "[DiabloMod]^x01 Nie wykonujesz zadnego Questa.");
	else
	{
		new info[128];
		switch(iPlayerQuestType[id])
		{
			case CLASS:
			{
				if(!iPlayerQuestAdditional[id])
					ResetQuest(id);
				new szClass[64];
				diablo_get_class_name(iPlayerQuestAdditional[id], szClass, charsmax(szClass));
				formatex(info, 127, QuestInfoMessage[iPlayerQuestType[id]], szClass, (get_user_progress_need(id) - get_user_progress(id)));
			}
			case ITEM:
			{
				if(!iPlayerQuestAdditional[id])
					ResetQuest(id);
				new szItem[64];
				diablo_get_item_name(iPlayerQuestAdditional[id], szItem, charsmax(szItem));
				formatex(info, 127, QuestInfoMessage[iPlayerQuestType[id]], szItem, (get_user_progress_need(id) - get_user_progress(id)));
			}
			default: 
			{
				formatex(info, 127, QuestInfoMessage[iPlayerQuestType[id]], (get_user_progress_need(id) - get_user_progress(id)));
			}
		}
		ColorChat(id, GREEN, "[DiabloMod]^x01 Rozdzial:^x03 %s^x01. Postep:^x03 %i/%i^x01.", QuestRozdzial[iPlayerPrzedzial[id]], get_user_progress(id), get_user_progress_need(id));
		ColorChat(id, GREEN, "[DiabloMod]^x01 Info:^x03 %s^x01.", info);
	}
	return PLUGIN_CONTINUE;
}

public DeathMsg()
{
	new id = read_data(1);
	new vid = read_data(2);
	new headshot = read_data(3);
	
	if(is_user_connected(id) && get_user_team(id) != get_user_team(vid) && iPlayerQuestType[id])
	{
		switch(iPlayerQuestType[id])
		{
			case KILL: AddProgress(id, 1);
			case HEADSHOT: 
			{ 
				if(headshot) 
					AddProgress(id, 1); 
			}
			case CLASS: 
			{
				if(iPlayerQuestAdditional[id] == diablo_get_user_class(vid))
					AddProgress(id, 1);
			}
		}
	}
} 

public LogEvent_Quest()
{
	new user[80], action[64], name[32];
	read_logargv(0, user, 79);
	read_logargv(2, action, 63);
	parse_loguser(user, name, 31);
	new id = get_user_index(name);
	
	if(!is_user_connected(id) || iPlayerQuestType[id] == NONE)
		return PLUGIN_HANDLED;
	
	new type = iPlayerQuestType[id];
	
	if(equal(action, "Planted_The_Bomb"))
	{
		if(type == SUBSTRATES)
			AddProgress(id, 1);
	}
	else if(equal(action, "Defused_The_Bomb"))
	{ 
		if(type == DISARM)
			AddProgress(id, 1); 
	}
	return PLUGIN_HANDLED;
}

public LogEvent_Quest2()
{
	new id = get_loguser_index();
	if(iPlayerQuestType[id] == RESUCE_HOSTAGES)
		AddProgress(id, 1);
}

public diablo_item_get(id, item)
{
	if(iPlayerQuestType[id] == ITEM && item == iPlayerQuestAdditional[id])
		AddProgress(id, 1);
}

public Damage(id)
{
	if(is_user_connected(id))
	{
		new atc_id = get_user_attacker(id);
		
		if(!is_user_connected(atc_id) || !iPlayerQuestType[atc_id] || iPlayerQuestType[atc_id] != DMG || atc_id == id)
			return PLUGIN_HANDLED;
		
		AddProgress(atc_id, read_data(2));
	}
	return PLUGIN_HANDLED;
}

public diablo_user_change_class(id)
{
	if(is_user_bot(id) || is_user_hltv(id))
		return PLUGIN_CONTINUE;
	
	SaveQuest(id, iPlayerQuestType[id]);
	diablo_get_class_name(diablo_get_user_class(id), szClassName[id], charsmax(szClassName));
	ResetQuest(id);
	LoadQuest(id);
	return PLUGIN_CONTINUE;
}

public SaveQuest(id, quest) 
{
	if(is_user_bot(id) || is_user_hltv(id) || !quest)
		return PLUGIN_CONTINUE;
	
	new vaultkey[64], vaultdata[64];
	
	formatex(vaultkey, charsmax(vaultkey), "%s-%s", szPlayerName[id], szClassName[id]);
	formatex(vaultdata, charsmax(vaultdata), "%i %i %i %i %i", iPlayerQuestID[id], iPlayerQuestType[id], iPlayerQuestAdditional[id], iPlayerQuestProgress[id], iPlayerPrzedzial[id]);
	nvault_set(vault, vaultkey, vaultdata);
	
	return PLUGIN_CONTINUE;
}

public LoadQuest(id) 
{
	if(is_user_bot(id) || is_user_hltv(id))
		return PLUGIN_CONTINUE;
	
	new vaultkey[64], vaultdata[64];
	formatex(vaultkey, charsmax(vaultkey), "%s-%s", szPlayerName[id], szClassName[id]);
	nvault_get(vault, vaultkey, vaultdata, charsmax(vaultdata));
	
	new data[5][64];
	parse(vaultdata, data[0], 63, data[1], 63, data[2], 63, data[3], 63, data[4], 63)
	
	new new_data[5];
	
	for(new i = 0; i < 5; i++)
		new_data[i] = str_to_num(data[i]);
		
	if(!new_data[0]) 
		return PLUGIN_HANDLED;
		
	iPlayerQuestID[id] = new_data[0];
	iPlayerQuestType[id] = new_data[1];
	iPlayerQuestAdditional[id] = new_data[2];
	iPlayerQuestProgress[id] = new_data[3];
	iPlayerPrzedzial[id] = new_data[4];
	
	return PLUGIN_HANDLED;
	
}

public get_user_progress(id)
	return iPlayerQuestProgress[id] ? iPlayerQuestProgress[id] : 0;

public get_user_progress_need(id)
{
	if(iPlayerQuestType[id])
		return ArrayGetCell(gIleRazy, iPlayerQuestID[id]);
		
	return 0;	
}

stock get_loguser_index()
{
	new loguser[80], name[32];
	read_logargv(0, loguser, 79);
	parse_loguser(loguser, name, 31);

	return get_user_index(name);
}